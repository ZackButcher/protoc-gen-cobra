// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nested.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TopLevelNestedType struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopLevelNestedType) Reset()         { *m = TopLevelNestedType{} }
func (m *TopLevelNestedType) String() string { return proto.CompactTextString(m) }
func (*TopLevelNestedType) ProtoMessage()    {}
func (*TopLevelNestedType) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{0}
}
func (m *TopLevelNestedType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopLevelNestedType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopLevelNestedType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TopLevelNestedType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopLevelNestedType.Merge(dst, src)
}
func (m *TopLevelNestedType) XXX_Size() int {
	return m.Size()
}
func (m *TopLevelNestedType) XXX_DiscardUnknown() {
	xxx_messageInfo_TopLevelNestedType.DiscardUnknown(m)
}

var xxx_messageInfo_TopLevelNestedType proto.InternalMessageInfo

func (m *TopLevelNestedType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NestedRequest struct {
	Inner                *NestedRequest_InnerNestedType `protobuf:"bytes,1,opt,name=inner" json:"inner,omitempty"`
	TopLevel             *TopLevelNestedType            `protobuf:"bytes,2,opt,name=top_level,json=topLevel" json:"top_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *NestedRequest) Reset()         { *m = NestedRequest{} }
func (m *NestedRequest) String() string { return proto.CompactTextString(m) }
func (*NestedRequest) ProtoMessage()    {}
func (*NestedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{1}
}
func (m *NestedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NestedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedRequest.Merge(dst, src)
}
func (m *NestedRequest) XXX_Size() int {
	return m.Size()
}
func (m *NestedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NestedRequest proto.InternalMessageInfo

func (m *NestedRequest) GetInner() *NestedRequest_InnerNestedType {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (m *NestedRequest) GetTopLevel() *TopLevelNestedType {
	if m != nil {
		return m.TopLevel
	}
	return nil
}

type NestedRequest_InnerNestedType struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NestedRequest_InnerNestedType) Reset()         { *m = NestedRequest_InnerNestedType{} }
func (m *NestedRequest_InnerNestedType) String() string { return proto.CompactTextString(m) }
func (*NestedRequest_InnerNestedType) ProtoMessage()    {}
func (*NestedRequest_InnerNestedType) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{1, 0}
}
func (m *NestedRequest_InnerNestedType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedRequest_InnerNestedType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedRequest_InnerNestedType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NestedRequest_InnerNestedType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedRequest_InnerNestedType.Merge(dst, src)
}
func (m *NestedRequest_InnerNestedType) XXX_Size() int {
	return m.Size()
}
func (m *NestedRequest_InnerNestedType) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedRequest_InnerNestedType.DiscardUnknown(m)
}

var xxx_messageInfo_NestedRequest_InnerNestedType proto.InternalMessageInfo

func (m *NestedRequest_InnerNestedType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NestedResponse struct {
	Return               string   `protobuf:"bytes,1,opt,name=return,proto3" json:"return,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NestedResponse) Reset()         { *m = NestedResponse{} }
func (m *NestedResponse) String() string { return proto.CompactTextString(m) }
func (*NestedResponse) ProtoMessage()    {}
func (*NestedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{2}
}
func (m *NestedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NestedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedResponse.Merge(dst, src)
}
func (m *NestedResponse) XXX_Size() int {
	return m.Size()
}
func (m *NestedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NestedResponse proto.InternalMessageInfo

func (m *NestedResponse) GetReturn() string {
	if m != nil {
		return m.Return
	}
	return ""
}

type DeeplyNested struct {
	L0                   *DeeplyNested_DeeplyNestedOuter `protobuf:"bytes,1,opt,name=l0" json:"l0,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DeeplyNested) Reset()         { *m = DeeplyNested{} }
func (m *DeeplyNested) String() string { return proto.CompactTextString(m) }
func (*DeeplyNested) ProtoMessage()    {}
func (*DeeplyNested) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{3}
}
func (m *DeeplyNested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeeplyNested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNested.Merge(dst, src)
}
func (m *DeeplyNested) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNested) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNested.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNested proto.InternalMessageInfo

func (m *DeeplyNested) GetL0() *DeeplyNested_DeeplyNestedOuter {
	if m != nil {
		return m.L0
	}
	return nil
}

type DeeplyNested_DeeplyNestedOuter struct {
	L1                   *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner `protobuf:"bytes,1,opt,name=l1" json:"l1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DeeplyNested_DeeplyNestedOuter) Reset()         { *m = DeeplyNested_DeeplyNestedOuter{} }
func (m *DeeplyNested_DeeplyNestedOuter) String() string { return proto.CompactTextString(m) }
func (*DeeplyNested_DeeplyNestedOuter) ProtoMessage()    {}
func (*DeeplyNested_DeeplyNestedOuter) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{3, 0}
}
func (m *DeeplyNested_DeeplyNestedOuter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNested_DeeplyNestedOuter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNested_DeeplyNestedOuter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeeplyNested_DeeplyNestedOuter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNested_DeeplyNestedOuter.Merge(dst, src)
}
func (m *DeeplyNested_DeeplyNestedOuter) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNested_DeeplyNestedOuter) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNested_DeeplyNestedOuter.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNested_DeeplyNestedOuter proto.InternalMessageInfo

func (m *DeeplyNested_DeeplyNestedOuter) GetL1() *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner {
	if m != nil {
		return m.L1
	}
	return nil
}

type DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner struct {
	L2                   *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost `protobuf:"bytes,1,opt,name=l2" json:"l2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                  `json:"-"`
	XXX_sizecache        int32                                                                   `json:"-"`
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) Reset() {
	*m = DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner{}
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) String() string {
	return proto.CompactTextString(m)
}
func (*DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) ProtoMessage() {}
func (*DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{3, 0, 0}
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner.Merge(dst, src)
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner proto.InternalMessageInfo

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) GetL2() *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost {
	if m != nil {
		return m.L2
	}
	return nil
}

type DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost struct {
	L3                   string   `protobuf:"bytes,1,opt,name=l3,proto3" json:"l3,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) Reset() {
	*m = DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost{}
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) String() string {
	return proto.CompactTextString(m)
}
func (*DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) ProtoMessage() {}
func (*DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) Descriptor() ([]byte, []int) {
	return fileDescriptor_nested_7df99a9db8993913, []int{3, 0, 0, 0}
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost.Merge(dst, src)
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost proto.InternalMessageInfo

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) GetL3() string {
	if m != nil {
		return m.L3
	}
	return ""
}

func init() {
	proto.RegisterType((*TopLevelNestedType)(nil), "pb.TopLevelNestedType")
	proto.RegisterType((*NestedRequest)(nil), "pb.NestedRequest")
	proto.RegisterType((*NestedRequest_InnerNestedType)(nil), "pb.NestedRequest.InnerNestedType")
	proto.RegisterType((*NestedResponse)(nil), "pb.NestedResponse")
	proto.RegisterType((*DeeplyNested)(nil), "pb.DeeplyNested")
	proto.RegisterType((*DeeplyNested_DeeplyNestedOuter)(nil), "pb.DeeplyNested.DeeplyNestedOuter")
	proto.RegisterType((*DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner)(nil), "pb.DeeplyNested.DeeplyNestedOuter.DeeplyNestedInner")
	proto.RegisterType((*DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost)(nil), "pb.DeeplyNested.DeeplyNestedOuter.DeeplyNestedInner.DeeplyNestedInnermost")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NestedMessagesClient is the client API for NestedMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NestedMessagesClient interface {
	Get(ctx context.Context, in *NestedRequest, opts ...grpc.CallOption) (*NestedResponse, error)
	GetDeeplyNested(ctx context.Context, in *DeeplyNested, opts ...grpc.CallOption) (*NestedResponse, error)
}

type nestedMessagesClient struct {
	cc *grpc.ClientConn
}

func NewNestedMessagesClient(cc *grpc.ClientConn) NestedMessagesClient {
	return &nestedMessagesClient{cc}
}

func (c *nestedMessagesClient) Get(ctx context.Context, in *NestedRequest, opts ...grpc.CallOption) (*NestedResponse, error) {
	out := new(NestedResponse)
	err := c.cc.Invoke(ctx, "/pb.NestedMessages/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nestedMessagesClient) GetDeeplyNested(ctx context.Context, in *DeeplyNested, opts ...grpc.CallOption) (*NestedResponse, error) {
	out := new(NestedResponse)
	err := c.cc.Invoke(ctx, "/pb.NestedMessages/GetDeeplyNested", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NestedMessagesServer is the server API for NestedMessages service.
type NestedMessagesServer interface {
	Get(context.Context, *NestedRequest) (*NestedResponse, error)
	GetDeeplyNested(context.Context, *DeeplyNested) (*NestedResponse, error)
}

func RegisterNestedMessagesServer(s *grpc.Server, srv NestedMessagesServer) {
	s.RegisterService(&_NestedMessages_serviceDesc, srv)
}

func _NestedMessages_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestedMessagesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NestedMessages/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestedMessagesServer).Get(ctx, req.(*NestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NestedMessages_GetDeeplyNested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeeplyNested)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestedMessagesServer).GetDeeplyNested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NestedMessages/GetDeeplyNested",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestedMessagesServer).GetDeeplyNested(ctx, req.(*DeeplyNested))
	}
	return interceptor(ctx, in, info, handler)
}

var _NestedMessages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NestedMessages",
	HandlerType: (*NestedMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NestedMessages_Get_Handler,
		},
		{
			MethodName: "GetDeeplyNested",
			Handler:    _NestedMessages_GetDeeplyNested_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nested.proto",
}

func (m *TopLevelNestedType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopLevelNestedType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NestedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inner != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(m.Inner.Size()))
		n1, err := m.Inner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TopLevel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNested(dAtA, i, uint64(m.TopLevel.Size()))
		n2, err := m.TopLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NestedRequest_InnerNestedType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedRequest_InnerNestedType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NestedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Return) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(len(m.Return)))
		i += copy(dAtA[i:], m.Return)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeeplyNested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNested) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L0 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(m.L0.Size()))
		n3, err := m.L0.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeeplyNested_DeeplyNestedOuter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNested_DeeplyNestedOuter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(m.L1.Size()))
		n4, err := m.L1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(m.L2.Size()))
		n5, err := m.L2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.L3) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNested(dAtA, i, uint64(len(m.L3)))
		i += copy(dAtA[i:], m.L3)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintNested(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TopLevelNestedType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NestedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inner != nil {
		l = m.Inner.Size()
		n += 1 + l + sovNested(uint64(l))
	}
	if m.TopLevel != nil {
		l = m.TopLevel.Size()
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NestedRequest_InnerNestedType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NestedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Return)
	if l > 0 {
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeeplyNested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L0 != nil {
		l = m.L0.Size()
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeeplyNested_DeeplyNestedOuter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L1 != nil {
		l = m.L1.Size()
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L2 != nil {
		l = m.L2.Size()
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.L3)
	if l > 0 {
		n += 1 + l + sovNested(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNested(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNested(x uint64) (n int) {
	return sovNested(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopLevelNestedType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopLevelNestedType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopLevelNestedType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inner == nil {
				m.Inner = &NestedRequest_InnerNestedType{}
			}
			if err := m.Inner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopLevel == nil {
				m.TopLevel = &TopLevelNestedType{}
			}
			if err := m.TopLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedRequest_InnerNestedType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerNestedType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerNestedType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Return", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Return = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeeplyNested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeeplyNested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L0 == nil {
				m.L0 = &DeeplyNested_DeeplyNestedOuter{}
			}
			if err := m.L0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNested_DeeplyNestedOuter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeeplyNestedOuter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeeplyNestedOuter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L1 == nil {
				m.L1 = &DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner{}
			}
			if err := m.L1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeeplyNestedInner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeeplyNestedInner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L2 == nil {
				m.L2 = &DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost{}
			}
			if err := m.L2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNested
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeeplyNestedInnermost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeeplyNestedInnermost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNested
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNested
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNested(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNested
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNested(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNested
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNested
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNested
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNested
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNested
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNested(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNested = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNested   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nested.proto", fileDescriptor_nested_7df99a9db8993913) }

var fileDescriptor_nested_7df99a9db8993913 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x5d, 0x4a, 0xeb, 0x40,
	0x14, 0xbe, 0x33, 0x97, 0x96, 0xdb, 0x73, 0x7b, 0xfb, 0x33, 0x5c, 0x4b, 0xc9, 0x43, 0xd0, 0xbc,
	0xb4, 0x88, 0x84, 0x36, 0x11, 0xfa, 0x2e, 0x85, 0xa2, 0xf8, 0x03, 0x43, 0x9f, 0x7c, 0x91, 0x16,
	0x0f, 0x22, 0x8c, 0xc9, 0x98, 0x99, 0x54, 0xba, 0x93, 0xae, 0xc0, 0x3d, 0xb8, 0x03, 0x1f, 0x5d,
	0x82, 0xd4, 0x2d, 0xb8, 0x00, 0x49, 0x32, 0xc5, 0xa6, 0xa9, 0x08, 0x3e, 0x9e, 0xef, 0x2f, 0xdf,
	0x39, 0x19, 0xa8, 0x06, 0xa8, 0x34, 0x5e, 0xbb, 0x32, 0x0a, 0x75, 0xc8, 0xa8, 0x9c, 0x3a, 0xfb,
	0xc0, 0xc6, 0xa1, 0x3c, 0xc5, 0x19, 0x8a, 0xf3, 0x94, 0x1b, 0xcf, 0x25, 0xb2, 0xff, 0x50, 0x9a,
	0x4d, 0x44, 0x8c, 0x6d, 0xb2, 0x4b, 0xba, 0x15, 0x9e, 0x0d, 0xce, 0x23, 0x81, 0x7f, 0x99, 0x88,
	0xe3, 0x7d, 0x8c, 0x4a, 0xb3, 0x01, 0x94, 0x6e, 0x83, 0x00, 0xa3, 0x54, 0xf7, 0xd7, 0xdb, 0x73,
	0xe5, 0xd4, 0xcd, 0x29, 0xdc, 0xe3, 0x84, 0xfe, 0x4c, 0xe6, 0x99, 0x9e, 0xf9, 0x50, 0xd1, 0xa1,
	0xbc, 0x12, 0xc9, 0x77, 0xdb, 0x34, 0x35, 0xb7, 0x12, 0x73, 0xb1, 0x0b, 0xff, 0xa3, 0x0d, 0x66,
	0x75, 0xa0, 0xbe, 0x11, 0xf7, 0x45, 0xd1, 0x2e, 0xd4, 0x56, 0x2d, 0x94, 0x0c, 0x03, 0x85, 0xac,
	0x05, 0xe5, 0x08, 0x75, 0x1c, 0x05, 0x46, 0x68, 0x26, 0xe7, 0x89, 0x42, 0x75, 0x88, 0x28, 0xc5,
	0x3c, 0x33, 0x30, 0x0f, 0xa8, 0xe8, 0x99, 0x75, 0x9c, 0xa4, 0xd1, 0x3a, 0x9b, 0x1b, 0x2e, 0x62,
	0x8d, 0x11, 0xa7, 0xa2, 0x67, 0xbd, 0x13, 0x68, 0x16, 0x18, 0x36, 0x04, 0x2a, 0xfa, 0x26, 0xe9,
	0xf0, 0xfb, 0xa4, 0x1c, 0x92, 0xae, 0xc9, 0xa9, 0xe8, 0x5b, 0x8b, 0x8d, 0xec, 0x94, 0x61, 0x97,
	0x40, 0x85, 0x67, 0xb2, 0x4f, 0x7e, 0x92, 0x5d, 0x44, 0xee, 0x42, 0xa5, 0x39, 0x15, 0x9e, 0xd5,
	0x81, 0x9d, 0xad, 0x24, 0xab, 0x01, 0x15, 0xbe, 0xb9, 0x1f, 0x15, 0xbe, 0xf7, 0xb0, 0xba, 0xf2,
	0x19, 0x2a, 0x35, 0xb9, 0x41, 0xc5, 0x0e, 0xe0, 0xf7, 0x08, 0x35, 0x6b, 0x16, 0x9e, 0x81, 0xc5,
	0xd6, 0x21, 0xf3, 0x4f, 0x06, 0x50, 0x1f, 0xa1, 0xce, 0x5d, 0xbf, 0xb1, 0xb9, 0xcb, 0x36, 0xe3,
	0x51, 0xe3, 0x79, 0x69, 0x93, 0x97, 0xa5, 0x4d, 0x5e, 0x97, 0x36, 0x59, 0xbc, 0xd9, 0xbf, 0xa6,
	0xe5, 0xf4, 0x41, 0xfb, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0xcd, 0x71, 0xa4, 0xe0, 0x02,
	0x00, 0x00,
}
